{"version":3,"sources":["store/selectors.ts","store/atoms.tsx","components/Nav/NavItems.tsx","components/Nav/Navbar.tsx","utils/utils.ts","components/MainMenu/MainMenu.tsx","components/Pages/Home.tsx","components/Pages/NotFound.tsx","components/LoaderButton.tsx","utils/crypting.ts","utils/endpoints.ts","components/Pages/Auth/Login.tsx","components/Pages/Auth/Register.tsx","components/Pages/Auth/Confirmation.tsx","resources/images/arrow.svg","components/Game/Tile.tsx","components/Game/Score.tsx","components/ExitButton.tsx","components/Game/GameMenu.tsx","components/Game/Game.tsx","components/Lobby/LobbyPlayer.tsx","BusinessLogic/BusinessLogic.tsx","components/Lobby/Lobby.tsx","components/Pages/LeaderboardItem.tsx","components/Pages/Leaderboard.tsx","Routes.tsx","App.tsx","index.tsx"],"names":["socket","appState","atom","key","default","authenticated","lobbyState","id","players","gameState","isOver","game","premovesState","scoreState","gameSocketUrlState","connectEventState","NavItems","history","useHistory","useRecoilState","username","setAppState","to","className","onClick","document","cookie","push","Navbar","makeId","length","result","characters","i","charAt","Math","floor","random","webSocketUrl","window","location","hostname","connectionString","currentGameSocket","selector","get","url","close","WebSocket","set","undefined","MainMenu","setGameSocketUrl","setConnectEvent","useRecoilValue","useState","lobbyId","setLobbyId","showLobbyInput","setShowLobbyInput","lobbyError","connectSocket","event","Form","onSubmit","e","preventDefault","InputGroup","FormControl","pattern","title","required","placeholder","type","value","onChange","target","Button","Home","NotFound","LoaderButton","isLoading","disabled","props","children","sha256","string","CryptoJS","SHA256","toString","enc","Hex","apiPrefix","CREATE_USER_URL","LEADERBOARD_URL","AUTH_USER_URL","reqOptions","body","method","headers","Origin","host","JSON","stringify","Login","loginError","setLoginError","setIsLoading","setUsername","password","setPassword","authenticate","a","password_hash","password_salt","fetch","then","res","catch","error","status","json","Date","getTime","Group","controlId","Label","Control","autoFocus","block","Register","email","setEmail","registerUser","email_address","Confirmation","useEffect","Promise","f","setTimeout","redirect","Square","army","owner","terrain","selected","select","directions","Array","from","map","direction","src","Arrow","alt","Score","playerRows","scores","score","color","land","ExitButton","gameSocket","resetLobby","useResetRecoilState","data","message","send","GameMenu","winner","first","ButtonGroup","vertical","Game","premoves","setPremoves","setSelected","menu","setMenu","board","row","y","squares","square","x","coords","selectClass","Set","forEach","premove","add","Tile","find","s","onkeydown","pressedKey","code","slice","coor","gameMenu","bounds","LobbyPlayer","name","ready","changeUser","lobby","setLobby","changedPlayer","index","findIndex","player","alert","connect","setGame","setScoreBoard","openEvent","gameSocketUrl","onopen","console","log","onclose","reason","onerror","onmessage","parse","payload","scoreboard","dir","connectTick","Lobby","setReady","playersBlocks","gameId","LeaderboardItem","games_won","games_played","Leaderboard","leaders","setLeaders","leadersRequest","leadersData","getLeaders","leader","Routes","exact","path","App","setApp","r","split","b","trimmedA","trim","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.50dba6da.chunk.js","sourcesContent":["import { selector } from 'recoil';\nimport { gameSocketUrlState } from './atoms';\n\nconst webSocketUrl = `${window.location.hostname}:8000`;\nexport const connectionString = `ws://${webSocketUrl}/ws/play/`;\n\nlet socket: WebSocket | undefined;\n\nexport const currentGameSocket = selector({\n  key: 'gameSocket',\n  get: ({ get }) => {\n    const url = get(gameSocketUrlState);\n    if (socket) {\n      socket.close(1000);\n    }\n    socket = new WebSocket((url === '') ? `${connectionString}room/` : url);\n    return socket;\n  },\n  set: () => {\n    socket = undefined;\n  },\n});\n\nexport default currentGameSocket;\n","import { atom } from 'recoil';\nimport {\n  IApp, IGame, ILobby, IPremove, IScore,\n} from '../resources/types/types';\n\nexport const appState = atom<IApp>({\n  key: 'auth',\n  default: {\n    authenticated: false,\n  },\n});\n\nexport const lobbyState = atom<ILobby>({\n  key: 'lobby',\n  default: {\n    id: '',\n    players: [],\n  },\n});\n\nexport const gameState = atom<IGame>({\n  key: 'game',\n  default: {\n    isOver: false,\n    game: [],\n  },\n});\n\nexport const premovesState = atom<IPremove[]>({\n  key: 'premoves',\n  default: [],\n});\n\nexport const scoreState = atom<IScore[]>({\n  key: 'scores',\n  default: [],\n});\n\nexport const gameSocketUrlState = atom<string>({\n  key: 'gameSocketUrlState',\n  default: '',\n});\n\nexport const connectEventState = atom<string>({\n  key: 'connectEvent',\n  default: '',\n});\n","import { useHistory } from 'react-router-dom';\nimport { useRecoilState } from 'recoil';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Link from 'react-bootstrap/Nav';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport React from 'react';\nimport { appState } from '../../store/atoms';\n\nconst NavItems = () => {\n  const history = useHistory();\n  const [{ authenticated, username }, setAppState] = useRecoilState(appState);\n\n  function handleLogout() {\n    setAppState({ authenticated: false });\n    document.cookie = 'username=';\n    history.push('/confirm');\n  }\n\n  return (\n    <>\n      {!authenticated && (\n      <LinkContainer to=\"/\">\n        <li className=\"navigation__item navigation__item--home\">Home</li>\n      </LinkContainer>\n      )}\n      {authenticated && <li className=\"navigation__username\">{username}</li>}\n      {authenticated ? (\n        <li className=\"navigation__item\" onClick={handleLogout}>Logout</li>\n      ) : (\n        <>\n          <LinkContainer to=\"/signup\">\n            <li className=\"navigation__item\">Signup</li>\n          </LinkContainer>\n          <LinkContainer to=\"/login\">\n            <li className=\"navigation__item\">Login</li>\n          </LinkContainer>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default NavItems;\n","import React from 'react';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport NavItems from './NavItems';\n\nexport const Navbar = () => (\n  <nav className=\"Navbar\">\n    <ul className=\"navigation\">\n      <NavItems />\n    </ul>\n  </nav>\n);\n\nexport default Navbar;\n","export const makeId = (length: number) => {\n  let result = '';\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < length; i += 1) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n  return result;\n};\n\nexport default makeId;\n","import React, { useState } from 'react';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport { useHistory } from 'react-router-dom';\nimport { connectEventState, gameSocketUrlState, lobbyState } from '../../store/atoms';\nimport { makeId } from '../../utils/utils';\nimport { connectionString } from '../../store/selectors';\n\nconst MainMenu = () => {\n  const history = useHistory();\n\n  const [, setGameSocketUrl] = useRecoilState(gameSocketUrlState);\n  const [, setConnectEvent] = useRecoilState(connectEventState);\n  const { id } = useRecoilValue(lobbyState);\n  const [lobbyId, setLobbyId] = useState('');\n  const [showLobbyInput, setShowLobbyInput] = useState(false);\n  const [lobbyError, setLobbyError] = useState(false);\n\n  const connectSocket = (event: string, url: string) => {\n    setGameSocketUrl(url);\n    setConnectEvent(event);\n  };\n\n  const handleSubmit = (e: any) => {\n    e.preventDefault();\n    connectSocket('JOIN_ROOM', `${connectionString}${lobbyId}/`);\n    // if (id === '') {\n    //   setLobbyError(true);\n    //   return;\n    // }\n    history.push('/lobby');\n  };\n\n  return (\n    <div className=\"menu\">\n      {showLobbyInput\n        ? (\n          <Form onSubmit={handleSubmit}>\n            <InputGroup className=\"mb-3\">\n              <FormControl\n                pattern=\"[A-Za-z0-9]{5,5}\"\n                title=\"Five letter lobby code alfanumeric\"\n                required\n                className=\"form__input\"\n                placeholder=\"Lobby Code\"\n                type=\"text\"\n                value={lobbyId}\n                onChange={(e) => setLobbyId(e.target.value)}\n              />\n              <Button className=\"join-btn\" type=\"submit\">\n                Go!\n              </Button>\n            </InputGroup>\n          </Form>\n        ) : (\n          <button className=\"menu__btn\" type=\"button\" onClick={() => { setShowLobbyInput(true); }}>Join Lobby</button>\n        )}\n      {lobbyError && <span className=\"menu__error\">Error connecting to lobby...</span>}\n      <LinkContainer to=\"/lobby\">\n        <button className=\"menu__btn\" type=\"button\" onClick={() => connectSocket('CREATE_ROOM', `${connectionString}${makeId(5)}/`)}>Create Lobby</button>\n      </LinkContainer>\n\n      <LinkContainer to=\"/leaderboard\">\n        <button className=\"menu__btn\" type=\"button\">Leaderboard</button>\n      </LinkContainer>\n    </div>\n  );\n};\nexport default MainMenu;\n","import React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { appState } from '../../store/atoms';\nimport MainMenu from '../MainMenu/MainMenu';\n\nconst Home = () => {\n  const [{ authenticated }] = useRecoilState(appState);\n\n  return (\n    <div className=\"Home\">\n      <div className=\"lander\">\n        <header className=\"lander__header\">Dictators</header>\n        <span className=\"lander__moto\">Gather troops, conquer enemy land... be the last one standing!</span>\n        {!authenticated && <span className=\"lander__info\">Please login or register</span>}\n      </div>\n      {authenticated && <MainMenu />}\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nconst NotFound = () => (\n  <div className=\"NotFound text-center\">\n    <h3>Sorry, page not found!</h3>\n  </div>\n);\n\nexport default NotFound;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { BsArrowRepeat } from 'react-icons/bs';\nimport './LoaderButton.css';\n\nconst LoaderButton = ({\n  isLoading = false,\n  className = '',\n  disabled = false,\n  ...props\n}) => (\n  <Button\n    disabled={disabled || isLoading}\n    className={`LoaderButton ${className}`}\n    {...props}\n  >\n    {isLoading && <BsArrowRepeat className=\"spinning\" />}\n    {props.children}\n  </Button>\n);\n\nexport default LoaderButton;\n","import CryptoJS from 'crypto-js';\n\nconst sha256 = (string: string) => CryptoJS.SHA256(string).toString(CryptoJS.enc.Hex);\n\nexport default sha256;\n","// export const ORIGIN_URL = 'http://localhost:3000';\nconst apiPrefix = `${window.location.hostname}:8000`;\nexport const CREATE_USER_URL = `http://${apiPrefix}/api/user/create`;\nexport const LEADERBOARD_URL = `http://${apiPrefix}/api/leaderboard`;\nexport const AUTH_USER_URL = `http://${apiPrefix}/api/user/authenticate`;\n\nexport const reqOptions = (body: any) => ({\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    Origin: window.location.host,\n  },\n  body: JSON.stringify(body),\n});\n","import React, { FormEvent, useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { useHistory } from 'react-router-dom';\nimport './Auth.css';\nimport { useRecoilState } from 'recoil';\nimport { appState } from '../../../store/atoms';\nimport LoaderButton from '../../LoaderButton';\nimport sha256 from '../../../utils/crypting';\nimport { AUTH_USER_URL, reqOptions } from '../../../utils/endpoints';\n\nconst Login = () => {\n  const history = useHistory();\n\n  const [loginError, setLoginError] = useState([false, '']);\n  const [isLoading, setIsLoading] = useState(false);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [, setAppState] = useRecoilState(appState);\n\n  function validateForm() {\n    return username.length > 0 && password.length > 0;\n  }\n\n  const authenticate = async () => {\n    const body = {\n      username,\n      password_hash: sha256(password),\n      password_salt: 'sample_salt',\n    };\n    return fetch(AUTH_USER_URL, reqOptions(body))\n      .then((res) => res)\n      .catch((error) => setLoginError([true, error]));\n  };\n\n  async function handleSubmit(event: FormEvent) {\n    event.preventDefault();\n\n    setIsLoading(true);\n    try {\n      const res = await authenticate();\n      if (!res) return;\n      if (res.status !== 200) {\n        const { error } = await res.json();\n        setLoginError([true, error]);\n        return;\n      }\n      setAppState({ authenticated: true, username });\n      const DAY7 = 1000 * 60 * 60 * 24 * 7;\n      document.cookie = `username=${username}; expires=${new Date(new Date().getTime() + DAY7)}`;\n      history.push('/confirm');\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <div className=\"Login\">\n      <Form onSubmit={handleSubmit}>\n        <Form.Group controlId=\"username\">\n          <Form.Label className=\"form__label\">Username</Form.Label>\n          <Form.Control\n            className=\"form__input\"\n            autoFocus\n            type=\"username\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n        </Form.Group>\n        <Form.Group controlId=\"password\">\n          <Form.Label className=\"form__label\">Password</Form.Label>\n          <Form.Control\n            className=\"form__input\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </Form.Group>\n        <LoaderButton block type=\"submit\" isLoading={isLoading} disabled={!validateForm()}>\n          Login\n        </LoaderButton>\n        {loginError[0] && <span className=\"login__error-msg\">{loginError[1]}</span>}\n      </Form>\n    </div>\n  );\n};\n\nexport default Login;\n","import Form from 'react-bootstrap/Form';\nimport React, { FormEvent, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport './Auth.css';\nimport LoaderButton from '../../LoaderButton';\nimport sha256 from '../../../utils/crypting';\nimport { CREATE_USER_URL, reqOptions } from '../../../utils/endpoints';\n\nconst Register = () => {\n  const history = useHistory();\n\n  const [loginError, setLoginError] = useState([false, '']);\n  const [isLoading, setIsLoading] = useState(false);\n  const [email, setEmail] = useState('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  function validateForm() {\n    return email.length > 0 && username.length > 0 && password.length > 0;\n  }\n\n  const registerUser = async () => {\n    const body = {\n      username,\n      password_hash: sha256(password),\n      password_salt: 'sample_salt',\n      email_address: email,\n    };\n    return fetch(CREATE_USER_URL, reqOptions(body))\n      .then((res) => res)\n      .catch((error) => setLoginError([true, error]));\n  };\n\n  async function handleSubmit(event: FormEvent) {\n    event.preventDefault();\n\n    setIsLoading(true);\n    try {\n      const res = await registerUser();\n      if (!res) return;\n      if (res.status !== 204) {\n        const { error } = await res.json();\n        setLoginError([true, error]);\n        return;\n      }\n\n      history.push('/confirm');\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <div className=\"Register Login\">\n      <Form onSubmit={handleSubmit}>\n        <Form.Group controlId=\"username\">\n          <Form.Label className=\"form__label\">Username</Form.Label>\n          <Form.Control\n            className=\"form__input\"\n            autoFocus\n            type=\"username\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n        </Form.Group>\n        <Form.Group controlId=\"email\">\n          <Form.Label className=\"form__label\">Email</Form.Label>\n          <Form.Control\n            className=\"form__input\"\n            type=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          />\n        </Form.Group>\n        <Form.Group controlId=\"password\">\n          <Form.Label className=\"form__label\">Password</Form.Label>\n          <Form.Control\n            className=\"form__input\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </Form.Group>\n        <LoaderButton block type=\"submit\" isLoading={isLoading} disabled={!validateForm()}>\n          Sign up\n        </LoaderButton>\n        {loginError[0] && <span className=\"login__error-msg\">{loginError[1]}</span>}\n      </Form>\n    </div>\n  );\n};\n\nexport default Register;\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst Confirmation = () => {\n  const history = useHistory();\n\n  useEffect(() => {\n    const redirect = async () => {\n      await new Promise((f) => setTimeout(f, 2000));\n      history.push('/');\n    };\n    redirect();\n  });\n\n  return (\n    <div className=\"confirmation\">\n      <header className=\"confirmation__header\">Operation Successful</header>\n      <span className=\"confirmation__info\">You will be redirected shortly...</span>\n    </div>\n  );\n};\n\nexport default Confirmation;\n","export default __webpack_public_path__ + \"static/media/arrow.85582aed.svg\";","import React from 'react';\nimport { ITile } from '../../resources/types/types';\nimport Arrow from '../../resources/images/arrow.svg';\n\nconst Square: React.FC<ITile> = ({\n  army, owner, terrain, selected, select, directions,\n}) => (\n  <td className={`game__tile ${owner} ${terrain} ${selected}`} onClick={select}>\n    <span>{army}</span>\n    {Array.from(directions).map((direction) => <img key={direction} src={Arrow} alt=\"direction\" className={`game__arrow game__arrow--${direction}`} />)}\n  </td>\n);\n\nexport default Square;\n","import React from 'react';\nimport { IScoreProps } from '../../resources/types/types';\n\nconst Score = ({ scores }: IScoreProps) => {\n  const playerRows = scores.map((score) => (\n    <tr key={score.color} className={score.color}>\n      <td className=\"score__cell\">{score.username}</td>\n      <td className=\"score__cell\">{score.land}</td>\n      <td className=\"score__cell\">{score.army}</td>\n    </tr>\n  ));\n\n  return (\n    <table className=\"score\">\n      <thead>\n        <tr>\n          <th className=\"score__cell-head\">Player</th>\n          <th className=\"score__cell-head\">Land</th>\n          <th className=\"score__cell-head\">Army</th>\n        </tr>\n      </thead>\n      <tbody>\n        {playerRows}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Score;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { useRecoilState, useRecoilValue, useResetRecoilState } from 'recoil';\nimport { currentGameSocket } from '../store/selectors';\nimport { appState, connectEventState, lobbyState } from '../store/atoms';\n\nconst ExitButton = () => {\n  const gameSocket = useRecoilValue(currentGameSocket);\n  const { username } = useRecoilValue(appState);\n  const [, setConnectEvent] = useRecoilState(connectEventState);\n  const resetLobby = useResetRecoilState(lobbyState);\n\n  const exitLobby = () => {\n    const data = {\n      event: 'EXIT_LOBBY',\n      message: username,\n    };\n    gameSocket.send(JSON.stringify(data));\n    setConnectEvent('');\n    resetLobby();\n  };\n\n  return (\n    <LinkContainer to=\"/\">\n      <button type=\"button\" className=\"exit-btn\" onClick={exitLobby}>Exit</button>\n    </LinkContainer>\n  );\n};\n\nexport default ExitButton;\n","import React from 'react';\nimport { ButtonGroup } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\nimport { useRecoilValue } from 'recoil';\nimport ExitButton from '../ExitButton';\nimport { appState, gameState } from '../../store/atoms';\nimport { currentGameSocket } from '../../store/selectors';\n\nconst GameMenu = () => {\n  const { username } = useRecoilValue(appState);\n  const { isOver, winner } = useRecoilValue(gameState);\n  const gameSocket = useRecoilValue(currentGameSocket);\n\n  const surrender = () => {\n    const data = {\n      event: 'SURRENDER',\n      message: username,\n    };\n    gameSocket.send(JSON.stringify(data));\n  };\n\n  const first = (isOver) ? (\n    <span>\n      And the winner is:&nbsp;\n      {winner}\n    </span>\n  ) : (\n    <button className=\"surrender-btn\" type=\"button\" onClick={surrender}>Surrender</button>\n  );\n\n  return (\n    <>\n      <div className=\"game__menu\">\n        <ButtonGroup vertical>\n          {first}\n          <ExitButton />\n        </ButtonGroup>\n      </div>\n      <div className=\"secret\" />\n    </>\n  );\n};\n\nexport default GameMenu;\n","import React, { useState } from 'react';\nimport './Game.css';\nimport { SetterOrUpdater, useRecoilState, useRecoilValue } from 'recoil';\nimport Draggable from 'react-draggable';\nimport Tile from './Tile';\nimport Score from './Score';\nimport {\n  appState, gameState, premovesState, scoreState,\n} from '../../store/atoms';\nimport { Coor } from '../../resources/types/types';\nimport { currentGameSocket } from '../../store/selectors';\nimport GameMenu from './GameMenu';\n\nconst Game = () => {\n  const { isOver, game } = useRecoilValue(gameState);\n  const [premoves, setPremoves] = useRecoilState(premovesState);\n  const scores = useRecoilValue(scoreState);\n  const { username } = useRecoilValue(appState);\n  const gameSocket = useRecoilValue(currentGameSocket);\n  // TODO delete default value / set to base Coor from backend\n  const [selected, setSelected]: [Coor, SetterOrUpdater<Coor>] = useState([-1, -1]);\n  const [menu, setMenu] = useState(false);\n\n  const board = game.map((row, y) => {\n    const squares = row.map((square, x) => {\n      const coords: Coor = [y, x];\n      const selectClass = (coords[0] === selected[0] && coords[1] === selected[1]) ? 'selected' : '';\n      const selectSquare = () => {\n        if (square.color === scores.find((s) => s.username === username)?.color) {\n          setSelected(coords);\n        } else {\n          setSelected([-1, -1]);\n        }\n      };\n      // TODO overwrites terrain in CSS\n      const directions: Set<string> = new Set();\n      premoves.forEach((premove) => {\n        if (premove.from[0] === coords[0] && premove.from[1] === coords[1]) {\n          directions.add(premove.direction);\n        }\n      });\n      return (\n        <Tile\n          key={coords.toString()}\n          army={square.army}\n          owner={square.color}\n          terrain={square.terrain}\n          selected={selectClass}\n          select={selectSquare}\n          directions={directions}\n        />\n      );\n    });\n    return (\n      <tr key={y.toString()}>\n        {squares}\n      </tr>\n    );\n  });\n\n  document.onkeydown = (e: KeyboardEvent) => {\n    if (!selected) {\n      return;\n    }\n    let x: Coor | undefined = selected;\n    let direction = '';\n    let pressedKey = '';\n    if (e.code === 'KeyW' && selected[0] > 0) {\n      x = [selected[0] - 1, selected[1]];\n      direction = 'up';\n      pressedKey = 'W';\n    } else if (e.code === 'KeyS' && selected[0] < game.length - 1) {\n      x = [selected[0] + 1, selected[1]];\n      direction = 'down';\n      pressedKey = 'S';\n    } else if (e.code === 'KeyA' && selected[1] > 0) {\n      x = [selected[0], selected[1] - 1];\n      direction = 'left';\n      pressedKey = 'A';\n    } else if (e.code === 'KeyD' && selected[1] < game[0].length - 1) {\n      x = [selected[0], selected[1] + 1];\n      direction = 'right';\n      pressedKey = 'D';\n    } else if (e.code === 'KeyE') {\n      if (premoves.length < 1) {\n        return;\n      }\n      pressedKey = 'E';\n      setPremoves(premoves.slice(0, -1));\n      setSelected(premoves[premoves.length - 1].from);\n    } else if (e.code === 'KeyQ') {\n      pressedKey = 'Q';\n      if (premoves.length > 0) {\n        setSelected(premoves[0].from);\n      }\n      setPremoves([]);\n    } else if (e.code === 'Escape') {\n      setMenu(!menu);\n      return;\n    } else {\n      return;\n    }\n    const data = {\n      event: 'MAKE_MOVE',\n      message: {\n        key: pressedKey,\n        username,\n        coor: selected,\n      },\n    };\n    gameSocket.send(JSON.stringify(data));\n    if (direction !== '') {\n      setPremoves([...premoves, { from: selected, direction }]);\n      setSelected(x);\n    }\n  };\n\n  const gameMenu = (menu || isOver) ? (\n    <GameMenu />\n  ) : <></>;\n\n  return (\n    <div className=\"game container-fluid\">\n      {gameMenu}\n      <Draggable bounds=\"parent\">\n        <table className=\"game__table\">\n          <tbody>\n            {board}\n          </tbody>\n        </table>\n      </Draggable>\n      <Score scores={scores} />\n    </div>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport { ILobbyPlayerProps } from '../../resources/types/types';\n\nconst LobbyPlayer = ({ name, color, ready }: ILobbyPlayerProps) => (\n  <div className={ready ? 'lobby-player ready' : 'lobby-player notready'}>\n    <span className=\"lobby-player__name\">{name}</span>\n    <div className=\"lobby-player__color\">\n      Color:\n      <span className={`lobby-player__color-span ${color}`} />\n    </div>\n  </div>\n);\n\nexport default LobbyPlayer;\n","import React from 'react';\nimport { SetterOrUpdater, useRecoilState, useRecoilValue } from 'recoil';\nimport { useHistory } from 'react-router-dom';\nimport { currentGameSocket } from '../store/selectors';\nimport {\n  appState, connectEventState, gameSocketUrlState, gameState, lobbyState, premovesState, scoreState,\n} from '../store/atoms';\nimport { IGame, ILobby, IPlayer } from '../resources/types/types';\n\nconst changeUser = (lobby: ILobby, setLobby: SetterOrUpdater<ILobby>,\n  changedPlayer: IPlayer) => {\n  const index = lobby.players.findIndex((player) => player.name === changedPlayer.name);\n  if (index === -1) {\n    alert('did not find user that want to change');\n  } else {\n    setLobby({\n      id: lobby.id,\n      players: [\n        ...lobby.players.slice(0, index), changedPlayer, ...lobby.players.slice(index + 1),\n      ],\n    });\n  }\n};\n\nconst connectTick = (setGame: SetterOrUpdater<IGame>, gameSocketUrl: string) => {\n  const gameSocket = new WebSocket(gameSocketUrl);\n\n  gameSocket.onopen = () => {\n    console.log('tick socket is connecting');\n\n    gameSocket.send(JSON.stringify({\n      event: 'START_TICK',\n      message: '',\n    }));\n  };\n\n  gameSocket.onmessage = function onMessage(e) {\n    let data = JSON.parse(e.data);\n    console.log('recieved new message', data);\n    data = data.payload;\n    const { message } = data;\n    const { event } = data;\n    switch (event) {\n      case 'LOAD_MAP':\n        console.log('trying to load map');\n        setGame({ game: message });\n        break;\n      default:\n        console.log('No event');\n    }\n  };\n};\n\nexport const connect = () => {\n  const [{ game }, setGame] = useRecoilState(gameState);\n  const gameSocket = useRecoilValue(currentGameSocket);\n  const { username } = useRecoilValue(appState);\n  const [, setScoreBoard] = useRecoilState(scoreState);\n  const history = useHistory();\n  const [lobby, setLobby] = useRecoilState(lobbyState);\n  const [, setPremoves] = useRecoilState(premovesState);\n  const openEvent = useRecoilValue(connectEventState);\n  const gameSocketUrl = useRecoilValue(gameSocketUrlState);\n\n  gameSocket.onopen = function open() {\n    console.log('WebSockets connection created.', openEvent);\n    // on websocket open, send the START event.\n    if (openEvent !== '') {\n      gameSocket.send(JSON.stringify({\n        event: openEvent,\n        message: username,\n      }));\n    } else {\n      gameSocket.close(1000);\n    }\n  };\n\n  gameSocket.onclose = function close(e) {\n    console.log('Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\n    console.log('this is game socket', gameSocket);\n    // setGameSocket(new WebSocket('ws://localhost:8000/ws/play'));\n    // setTimeout(() => {\n    //   connect();\n    // }, 1000);\n  };\n\n  gameSocket.onerror = function error(e) {\n    console.log('error ocurred');\n  };\n\n  gameSocket.onmessage = function onMessage(e) {\n    // On getting the message from the server\n    // Do the appropriate steps on each event.\n    let data = JSON.parse(e.data);\n    console.log('recieved new message', data);\n    data = data.payload;\n    const { message } = data;\n    const { event } = data;\n    switch (event) {\n      case 'START':\n        history.push('/game');\n        // connectTick(setGame, gameSocketUrl);\n        break;\n      case 'END':\n        alert(message);\n        break;\n        // case \"MOVE\":\n        //   if(message[\"player\"] !== char_choice){\n        //     make_move(message[\"index\"], message[\"player\"])\n        //     myturn = true;\n        //     document.getElementById(\"alert_move\").style.display = 'inline';\n        //   }\n        //   break;\n      case 'GAME_BOARD':\n        setGame({ game: message });\n        console.log('game board', message);\n        break;\n      case 'TICK':\n        console.log('this is thick', message);\n        setGame({ game: message.map });\n        setScoreBoard(message.scoreboard);\n        setPremoves(message.premoves.map((premove: any) => {\n          let dir = '';\n          if (premove[1] === 'W') {\n            dir = 'up';\n          } else if (premove[1] === 'A') {\n            dir = 'left';\n          } else if (premove[1] === 'S') {\n            dir = 'down';\n          } else if (premove[1] === 'D') {\n            dir = 'right';\n          }\n          return {\n            from: [premove[0][1], premove[0][0]],\n            direction: dir,\n          };\n        }));\n        break;\n      case 'JOIN_USER':\n      case 'EXIT_USER':\n        console.log('this are connected users', message);\n        setLobby({ id: message.id, players: message.players });\n        break;\n      case 'LOAD_MAP':\n        console.log('trying to load map');\n        setGame({ game: message });\n        break;\n      case 'USER_READY':\n        console.log('this user is ready', message);\n        changeUser(lobby, setLobby, message);\n        break;\n      case 'USER_NOT_READY':\n        console.log('this user is not ready', message);\n        changeUser(lobby, setLobby, message);\n        break;\n      case 'START_TICKING_BRO':\n        connectTick(setGame, gameSocketUrl);\n        break;\n      case 'GAME_OVER':\n        setGame({ isOver: true, winner: message.winner, game: message.map });\n        break;\n      default:\n        console.log('No event');\n    }\n  };\n\n  // if (gameSocket.readyState === WebSocket.OPEN) {\n  //   gameSocket.onopen();\n  // }\n};\n\nexport default connect;\n","import React, { useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { ToggleButton } from 'react-bootstrap';\nimport LobbyPlayer from './LobbyPlayer';\nimport { connect } from '../../BusinessLogic/BusinessLogic';\nimport { currentGameSocket } from '../../store/selectors';\nimport { appState, lobbyState } from '../../store/atoms';\nimport ExitButton from '../ExitButton';\n\nconst Lobby = () => {\n  const { id, players } = useRecoilValue(lobbyState);\n  const { username } = useRecoilValue(appState);\n  const [ready, setReady] = useState(false);\n  connect();\n  const playersBlocks = players.map((player) => (\n    <LobbyPlayer key={player.name} name={player.name} color={player.color} ready={player.ready} />\n  ));\n\n  const gameSocket = useRecoilValue(currentGameSocket);\n  const switchReady = () => {\n    setReady(!ready);\n    const event = (ready) ? 'NOT_READY' : 'GET_READY';\n    const data = {\n      event,\n      message: username,\n    };\n    gameSocket.send(JSON.stringify(data));\n  };\n\n  const gameId = (id !== '') ? `Lobby code: ${id}` : 'Error joining lobby';\n\n  return (\n    <div className=\"lobby\">\n      <header className=\"lobby__header\">Game Lobby</header>\n      <span className=\"lobby__info\">\n        Lobby code:\n        {' '}\n        {gameId}\n      </span>\n      <div className=\"lobby__players\">\n        {playersBlocks}\n      </div>\n      <div className=\"lobby__controls\">\n        <button className={ready ? 'ready-btn ready' : 'ready-btn notready'} onClick={switchReady} type=\"submit\">{(ready) ? 'Ready' : 'Unready'}</button>\n        <ExitButton />\n      </div>\n    </div>\n  );\n};\n\nexport default Lobby;\n","import React from 'react';\n\ninterface ILeaderboardItemProps {\n  username: string,\n  games_won: number,\n  games_played: number,\n  index: number,\n}\n\nconst LeaderboardItem = ({\n  username, games_won, games_played, index,\n}: ILeaderboardItemProps) => (\n  <div className=\"leaderboard__item\">\n    <span className=\"leaderboard__user\">\n      {`${index + 1}. place: ${username}`}\n    </span>\n    <span className=\"leaderboard__games-won\">\n      Won:\n      {' '}\n      {games_won}\n    </span>\n    <span className=\"leaderboard__games-played\">\n      Played:\n      {' '}\n      {games_played}\n    </span>\n  </div>\n);\n\nexport default LeaderboardItem;\n","import React, { useState, useEffect } from 'react';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { LEADERBOARD_URL } from '../../utils/endpoints';\nimport LeaderboardItem from './LeaderboardItem';\n\ninterface ILeaderboardItem {\n  username: string,\n  games_won: number,\n  games_played: number,\n}\n\nconst Leaderboard = () => {\n  const [leaders, setLeaders] = useState<ILeaderboardItem[]>([]);\n  useEffect(() => {\n    async function getLeaders() {\n      const leadersRequest = await fetch(LEADERBOARD_URL);\n      const leadersData = await leadersRequest.json();\n      setLeaders(leadersData);\n    }\n    getLeaders();\n  }, []);\n  return (\n    <div className=\"leaderboard\">\n      <header className=\"leaderboard__header\">\n        Leaderboard\n      </header>\n      {leaders.map((leader, index) => (\n        <LeaderboardItem\n          key={leader.username}\n          username={leader.username}\n          games_won={leader.games_won}\n          games_played={leader.games_played}\n          index={index}\n        />\n      ))}\n      <LinkContainer to=\"/\">\n        <button className=\"home-btn\" type=\"button\">\n          Home\n        </button>\n      </LinkContainer>\n    </div>\n  );\n};\n\nexport default Leaderboard;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Home from './components/Pages/Home';\nimport NotFound from './components/Pages/NotFound';\nimport Login from './components/Pages/Auth/Login';\nimport Register from './components/Pages/Auth/Register';\nimport Confirmation from './components/Pages/Auth/Confirmation';\nimport Game from './components/Game/Game';\nimport Lobby from './components/Lobby/Lobby';\nimport Leaderboard from './components/Pages/Leaderboard';\n\nconst Routes = () => (\n  <Switch>\n    <Route exact path=\"/\">\n      <Home />\n    </Route>\n    <Route exact path=\"/login\">\n      <Login />\n    </Route>\n    <Route exact path=\"/signup\">\n      <Register />\n    </Route>\n    <Route exact path=\"/confirm\">\n      <Confirmation />\n    </Route>\n    <Route exact path=\"/game\">\n      <Game />\n    </Route>\n    <Route exact path=\"/lobby\">\n      <Lobby />\n    </Route>\n    <Route exact path=\"/leaderboard\">\n      <Leaderboard />\n    </Route>\n    <Route>\n      <NotFound />\n    </Route>\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './resources/styles/App.css';\nimport './resources/styles/Pages.css';\nimport { useRecoilState } from 'recoil';\nimport { Navbar } from './components/Nav/Navbar';\nimport Routes from './Routes';\nimport { appState } from './store/atoms';\n\nfunction App() {\n  const [{ authenticated }, setApp] = useRecoilState(appState);\n  const r: { [x: string]: string; } = { a: 'b' };\n  const cookies: { key: string, value: string }[] = document.cookie.split(';').map((cookie) => {\n    const [a, b] = cookie.split('=');\n    const trimmedA = a.trim();\n    r[trimmedA] = b;\n    return { key: a, value: b };\n  });\n  if (!authenticated && r.username) {\n    setApp({ authenticated: true, username: r.username });\n  }\n\n  return (\n    <div className=\"App container-fluid py-3\">\n      <Navbar />\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './resources/styles/index.css';\nimport { RecoilRoot } from 'recoil';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <RecoilRoot>\n        <App />\n      </RecoilRoot>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}